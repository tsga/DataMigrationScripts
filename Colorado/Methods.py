#!/usr/bin/env python
import pandas as pd
from sodapy import Socrata
import os

workingDir="C:/Tseganeh/0WaDE/"
os.chdir(workingDir)

fileInput="DWR_Water_Right_-_Net_Amounts.csv"
MethodsCSV="Methods_dim.csv"

#from https://dev.socrata.com/foundry/data.colorado.gov/a8zw-bjth
# client = Socrata("data.colorado.gov", None)
# top100 = client.get("a8zw-bjth", limit=100)
# df = pd.DataFrame.from_records(top100)
#or read csv
df = pd.read_csv(fileInput)
df100 = df.head(100)

#WaDE columns

primKey='MethodID'
'MethodUUID'  # generated by WaDE
columns=['WaterSourceNativeID','MethodName', 'MethodDescription', 'MethodNEMILink', 'ApplicableResourceTypeCV',
         'MethodTypeCV', 'DataCoverageValue', 'DataQualityValueCV',	'DataConfidenceValue']

dtypesx = ['BigInt	NVarChar(250)	NVarChar(50)	Text	NVarChar(100)	NVarChar(100)	NVarChar(50)',
           'NVarChar(100)	NVarChar(50)	NVarChar(50)']

#assumes dtypes inferred from CO file
outdf100=pd.DataFrame(columns=columns)

#existing corresponding fields
outdf100.WaterSourceNativeID = df100.WDID   #TODO check this
outdf100.MethodName = 'DiversionTracking'
outdf100.MethodDescription = 'Methodology used for tracking diversions in the state of Colorado.'
#outdf100.MethodNEMILink
outdf100.ApplicableResourceTypeCV = 'Allocation'
outdf100.MethodTypeCV = 'Water withdrawals'
#outdf100.DataCoverageValue
#outdf100.DataQualityValueCV
#outdf100.DataConfidenceValue

#outdf100.rename_axis(indxx)

outdf100.drop(columns='WaterSourceNativeID', inplace=True) #outdf100.drop('WaterSourceNativeID', axis=1, inplace=True) #

outdf100.to_csv(MethodsCSV)         #index=False,

"""" 
* loop through columns wiht ().astype(dtype) to change dtype


dtype = ['str', 'str', 'str', 'str', 'int', 'float', 'float', 'int', 'float']
df = pd.concat([pd.Series(name=col, dtype=dt) for col, dt in zip(columns, dtype)], axis=1)
df.info()

dtypes = numpy.dtype([
          ('a', str),
          ('b', int),
          ('c', float),
          ('d', numpy.datetime64),
          ])
data = numpy.empty(0, dtype=dtypes)
df = pandas.DataFrame(data)

def df_empty(columns, dtypes, index=None):
    assert len(columns)==len(dtypes)
    df = pd.DataFrame(index=index)
    for c,d in zip(columns, dtypes):
        df[c] = pd.Series(dtype=d)
    return df

df = df_empty(['a', 'b'], dtypes=[np.int64, np.int64])
print(list(df.dtypes)) # int64, int64


from https://dev.socrata.com/foundry/data.colorado.gov/a8zw-bjth

# Unauthenticated client only works with public data sets. Note 'None'
# in place of application token, and no username or password:
client = Socrata("data.colorado.gov", None)

# Example authenticated client (needed for non-public datasets):
# client = Socrata(data.colorado.gov,
#                  MyAppToken,
#                  userame="user@example.com",
#                  password="AFakePassword")

# First 2000 results, returned as JSON from API / converted to Python list of
# dictionaries by sodapy.
results = client.get("a8zw-bjth", limit=2000)

# Convert to pandas DataFrame
results_df = pd.DataFrame.from_records(results)
"""